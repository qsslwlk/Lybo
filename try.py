#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Mon Feb 20 11:42:35 2023@author: quentin"""import json as jsonimport pandas as pd import numpy as npimport osimport matplotlib.pyplot as pltfrom datetime import datedirectory='/Users/quentin/Lybo/AMO10_deputes_actifs_mandats_actifs_organes_XVI_nettoye/acteurs'class depute():    def __init__(self, json_path):        self.path=json_path        # Initiate object        f = open(self.path)        j=json.load(f)        self.object=j        # Age        today=datetime.datetime.now()        self.age=today.year - int(j['etatCivil']['infoNaissance']['dateNais'][:4])                # Nombre de mandas        self.nb_mandats=len(j['mandats'])        # Genre        self.genre=j['etatCivil']['ident']['civ']        # Département naissance        try:            self.departement_naissance=j['etatCivil']['infoNaissance']['depNais']        except KeyError:            pass        # Ville naissance        self.ville_naissance=j['etatCivil']['infoNaissance']['villeNais']        # Catégorie professionnelle        try:            self.categorie_pro=j['profession']['libelleCourant']        except KeyError:            pass        # Catégorie professionnelle INSEE        try:            self.categorie_pro=j['profession']['socProcInsee']['catSocPro']        except KeyError:            pass                """Class: Une assemblée nationaleInput: liste de députés Methodes: plot répartition par genre, par âge etc"""def assemblee()# iterate over files in# that directoryall_deputes=[]for filename in os.listdir(directory):    f = os.path.join(directory, filename)    # checking if it is a file    if os.path.isfile(f):        dep = depute(directory+'/'+filename)        all_deputes.append(dep)# Nombre de députés par nombre de mandatsplt.hist(mandats, bins=40)plt.title('Nombre de députés en fonction du nombre de mandats passés')# Genregenre=pd.Series(genre)femme=genre[genre=='Mme'].dropna(axis=0)homme=genre[genre=='M.'].dropna(axis=0)plt.bar(height=[len(femme)/len(genre)*100,len(homme)/len(genre)*100], x=[0,1])plt.xticks([0,1], ['Femme', 'Homme'])plt.title('Genre des députés')# Âgenaissance=pd.Series(naissance).apply(lambda x: 2023-x)naissance.value_counts(sort=False).sort_index().plot.bar(figsize=(15,5), rot=45, title='Distribution de la date de naissance des députés')# Ville de naissanceville=pd.Series(dep_naissance)ville.value_counts(sort=True).plot.pie(figsize=(40,40), fontsize=30)# Catéorie procate_pro=pd.Series(cate_pro)cate_pro.value_counts().plot.pie(figsize=(40,40))# INSEE profilesocProcInsee=pd.Series(socProcInsee)socProcInsee.value_counts().plot.pie(figsize=(20,20), fontsize=10)