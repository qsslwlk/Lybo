#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Mon Feb 20 11:42:35 2023@author: quentin"""import json as jsonimport pandas as pd import numpy as npimport osimport matplotlib.pyplot as pltfrom datetime import datedirectory='/Users/quentin/Lybo/AMO10_deputes_actifs_mandats_actifs_organes_XVI_nettoye/acteurs'class depute():    def __init__(self, json_path):        self.path=json_path        # Initiate object        f = open(self.path)        j=json.load(f)        self.object=j        # Age        today=datetime.datetime.now()        self.age=today.year - int(j['etatCivil']['infoNaissance']['dateNais'][:4])                # Nombre de mandas        self.nb_mandats=len(j['mandats'])        # Genre        self.genre=j['etatCivil']['ident']['civ']        # Département naissance        try:            self.departement_naissance=j['etatCivil']['infoNaissance']['depNais']        except KeyError:            pass        # Ville naissance        self.ville_naissance=j['etatCivil']['infoNaissance']['villeNais']        # Catégorie professionnelle        try:            self.categorie_pro=j['profession']['libelleCourant']        except KeyError:            pass        # Catégorie professionnelle INSEE        try:            self.categorie_pro=j['profession']['socProcInsee']['catSocPro']        except KeyError:            pass                """Class: Une assemblée nationaleInput: liste de députés Methodes: plot répartition par genre, par âge etc"""class assemblee():    def __init__(self, liste_deputes):        self.liste_deputes=liste_deputes            def distribution_age(self):        # Age députés        liste_age = [x.age for x in self.liste_deputes]        self.liste_age=pd.Series(liste_age)        self.liste_age.value_counts(sort=False).sort_index().plot.bar(figsize=(15,5), rot=45, title='Distribution de la date de naissance des députés')        plt.show()            def distribution_genre(self):        liste_genre = pd.Series([x.genre for x in self.liste_deputes])        prop_femme = len(liste_genre[liste_genre == 'Mme'].dropna(axis=0))/len(liste_genre)        prop_homme = len(liste_genre[liste_genre == 'M.'].dropna(axis=0))/len(liste_genre)        self.liste_genre=pd.DataFrame({'Femme':prop_femme, 'Homme': prop_homme}, index=[0]).transpose()        self.liste_genre.plot.bar(title="Genre des députés", rot=46, legend=False)            def distribution_ville_naissance(self):        self.liste_ville_naissance = pd.Series([x.ville_naissance for x in self.liste_deputes])        self.liste_ville_naissance.value_counts(sort=True).plot.pie(figsize=(40,40), fontsize=30)    def categorie_pro(self):        self.categorie_pro=pd.Series([x.categorie_pro for x in self.liste_deputes])        self.categorie_pro.value_counts().plot.pie(figsize=(40,40))            def compare_age_pop_depute(self, path_insee_file):        self.age_insee=pd.read_excel(path_insee_file, header=3)        self.age_insee=self.age_insee.iloc[:14]        # Defining condition to group deputés age        cond1, cond2, cond3, cond4, cond5, cond6, cond7, cond8, cond9, cond10, cond11, cond12, cond13, cond14= (naissance<15), (15<naissance) & (naissance<19), (20<naissance) & (naissance<24), (25<naissance) & (naissance<29), (30<naissance) & (naissance<34), (35<naissance) & (naissance<39), (40<naissance) & (naissance<44), (45<naissance) & (naissance<49), (50<naissance) & (naissance<54), (55<naissance) & (naissance<59), (60<naissance) & (naissance<64), (65<naissance) & (naissance<69), (70<naissance) & (naissance<74), (naissance>75)              # Create df        cat1=len(naissance[cond1].dropna(axis=0))/len(naissance)        cat2=len(naissance[cond2].dropna(axis=0))/len(naissance)        cat3=len(naissance[cond3].dropna(axis=0))/len(naissance)        cat4=len(naissance[cond4].dropna(axis=0))/len(naissance)        cat5=len(naissance[cond5].dropna(axis=0))/len(naissance)        cat6=len(naissance[cond6].dropna(axis=0))/len(naissance)        cat7=len(naissance[cond7].dropna(axis=0))/len(naissance)        cat8=len(naissance[cond8].dropna(axis=0))/len(naissance)        cat9=len(naissance[cond9].dropna(axis=0))/len(naissance)        cat10=len(naissance[cond10].dropna(axis=0))/len(naissance)        cat11=len(naissance[cond11].dropna(axis=0))/len(naissance)        cat12=len(naissance[cond12].dropna(axis=0))/len(naissance)        cat13=len(naissance[cond13].dropna(axis=0))/len(naissance)        cat14=len(naissance[cond14].dropna(axis=0))/len(naissance)                self.prop_age_depute=pd.Series([cat1, cat2, cat3, cat4, cat5, cat6, cat7, cat8, cat9, cat10, cat11, cat12, cat13, cat14])        self.prop_age_depute=self.prop_age_depute*100        self.prop_age_depute=self.prop_age_depute.reset_index(drop=True)        comp=pd.DataFrame({'insee':self.age_insee['Ensemble'], 'député':self.prop_age_depute})                X = ['<15','15<<20','20<<24','25<<29', '30<<34', '35<<39', '40<<45', '45<<49', '50<<54', '55<<59', '60<<64', '65<<69', '70<<74', '>75']        X_axis = np.arange(len(X))        fig, ax = plt.subplots(figsize=(12,6))          ax.bar(X_axis - 0.2, comp['député'], 0.4, label = 'Député')        ax.bar(X_axis + 0.2, comp['insee'], 0.4, label = 'Population')          plt.xticks(X_axis, X)        plt.xlabel("Catégorie d'âge")        plt.ylabel("%")        plt.title("Distribution de l'âge pour la population et les députés")        plt.legend()        plt.show()        a=assemblee(all_deputes)      a.distribution_age()  a.distribution_genre()a.distribution_ville_naissance()a.categorie_pro()a.compare_age_pop_depute('/Users/quentin/Downloads/demo-pop-sexe-age-prop.xlsx')# iterate over files in# that directoryall_deputes=[]for filename in os.listdir(directory):    f = os.path.join(directory, filename)    # checking if it is a file    if os.path.isfile(f):        dep = depute(directory+'/'+filename)        all_deputes.append(dep)# Nombre de députés par nombre de mandatsplt.hist(mandats, bins=40)plt.title('Nombre de députés en fonction du nombre de mandats passés')