#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Mon Feb 20 11:42:35 2023@author: quentin"""import json as jsonimport pandas as pd import numpy as npimport osimport matplotlib.pyplot as pltfrom datetime import datedirectory='/Users/quentin/Lybo/AMO10_deputes_actifs_mandats_actifs_organes_XVI_nettoye/acteurs'class depute():    def __init__(self, json_path):        self.path=json_path        # Initiate object        f = open(self.path)        j=json.load(f)        self.object=j        # Age        today=datetime.datetime.now()        self.age=today.year - int(j['etatCivil']['infoNaissance']['dateNais'][:4])                # Nombre de mandas        self.nb_mandats=len(j['mandats'])        # Genre        self.genre=j['etatCivil']['ident']['civ']        # Département naissance        try:            self.departement_naissance=j['etatCivil']['infoNaissance']['depNais']        except KeyError:            pass        # Ville naissance        self.ville_naissance=j['etatCivil']['infoNaissance']['villeNais']        # Catégorie professionnelle        try:            self.categorie_pro=j['profession']['libelleCourant']        except KeyError:            pass        # Catégorie professionnelle INSEE        try:            self.categorie_pro=j['profession']['socProcInsee']['catSocPro']        except KeyError:            pass                """Class: Une assemblée nationaleInput: liste de députés Methodes: plot répartition par genre, par âge etc"""def assemblee()# iterate over files in# that directoryall_deputes=[]for filename in os.listdir(directory):    f = os.path.join(directory, filename)    # checking if it is a file    if os.path.isfile(f):        dep = depute(directory+'/'+filename)        all_deputes.append(dep)# Nombre de députés par nombre de mandatsplt.hist(mandats, bins=40)plt.title('Nombre de députés en fonction du nombre de mandats passés')# Genregenre=pd.Series(genre)femme=genre[genre=='Mme'].dropna(axis=0)homme=genre[genre=='M.'].dropna(axis=0)plt.bar(height=[len(femme)/len(genre)*100,len(homme)/len(genre)*100], x=[0,1])plt.xticks([0,1], ['Femme', 'Homme'])plt.title('Genre des députés')# Âgenaissance=pd.Series(naissance).apply(lambda x: 2023-x)naissance.value_counts(sort=False).sort_index().plot.bar(figsize=(15,5), rot=45, title='Distribution de la date de naissance des députés')# Ville de naissanceville=pd.Series(dep_naissance)ville.value_counts(sort=True).plot.pie(figsize=(40,40), fontsize=30)# Catéorie procate_pro=pd.Series(cate_pro)cate_pro.value_counts().plot.pie(figsize=(40,40))# INSEE profilesocProcInsee=pd.Series(socProcInsee)socProcInsee.value_counts().plot.pie(figsize=(20,20), fontsize=10)# Proportion âge Franceage_insee = pd.read_excel('/Users/quentin/Downloads/demo-pop-sexe-age-prop.xlsx', header=3)cond1= (naissance<15)cond2=(15<naissance) & (naissance<19)cond3=(20<naissance) & (naissance<24)cond4=(25<naissance) & (naissance<29)cond5=(30<naissance) & (naissance<34)cond6=(35<naissance) & (naissance<39)cond7=(40<naissance) & (naissance<44)cond8=(45<naissance) & (naissance<49)cond9=(50<naissance) & (naissance<54)cond10=(55<naissance) & (naissance<59)cond11=(60<naissance) & (naissance<64)cond12=(65<naissance) & (naissance<69)cond13=(70<naissance) & (naissance<74)cond14=(naissance>75)cat1=len(naissance[cond1].dropna(axis=0))/len(naissance)cat2=len(naissance[cond2].dropna(axis=0))/len(naissance)cat3=len(naissance[cond3].dropna(axis=0))/len(naissance)cat4=len(naissance[cond4].dropna(axis=0))/len(naissance)cat5=len(naissance[cond5].dropna(axis=0))/len(naissance)cat6=len(naissance[cond6].dropna(axis=0))/len(naissance)cat7=len(naissance[cond7].dropna(axis=0))/len(naissance)cat8=len(naissance[cond8].dropna(axis=0))/len(naissance)cat9=len(naissance[cond9].dropna(axis=0))/len(naissance)cat10=len(naissance[cond10].dropna(axis=0))/len(naissance)cat11=len(naissance[cond11].dropna(axis=0))/len(naissance)cat12=len(naissance[cond12].dropna(axis=0))/len(naissance)cat13=len(naissance[cond13].dropna(axis=0))/len(naissance)cat14=len(naissance[cond14].dropna(axis=0))/len(naissance)prop_depute=pd.Series([cat1, cat2, cat3, cat4, cat5, cat6, cat7, cat8, cat9, cat10, cat11, cat12, cat13, cat14])prop_depute=prop_depute*100prop_depute=prop_depute.reset_index(drop=True)comp=pd.DataFrame({'insee':age_insee['Ensemble'].iloc[:14], 'député':prop_depute})X = ['<15','15<<20','20<<24','25<<29', '30<<34', '35<<39', '40<<45', '45<<49', '50<<54', '55<<59', '60<<64', '65<<69', '70<<74', '>75']X_axis = np.arange(len(X))fig, ax = plt.subplots(figsize=(12,6))  ax.bar(X_axis - 0.2, comp['député'], 0.4, label = 'Député')ax.bar(X_axis + 0.2, comp['insee'], 0.4, label = 'Population')  plt.xticks(X_axis, X)plt.xlabel("Catégorie d'âge")plt.ylabel("%")plt.title("Distribution de l'âge pour la population et les députés")plt.legend()plt.show()